// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../database.db"
}

// Admin users for secure authentication
model AdminUser {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   // Hashed password
  name      String?
  role      String   @default("admin")
  resetToken String? // For password reset
  resetTokenExpiry DateTime? // Token expiration
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin_users")
}

// Users table for authentication and user management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  newsletterSubscriptions NewsletterSubscription[]
  contactMessages        ContactMessage[]
  reviews                Review[]
  favorites              UserFavorite[]

  @@map("users")
}

// Newsletter subscribers
model NewsletterSubscription {
  id        String   @id @default(cuid())
  email     String   @unique
  userId    String?  // Optional link to user account
  subscribedAt DateTime @default(now())
  isActive  Boolean  @default(true)
  source    String?  // Where they subscribed from (landing page, popup, etc.)

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("newsletter_subscriptions")
}

// Contact form messages
model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
  isReplied Boolean  @default(false)
  reply     String?  // Admin's reply message
  repliedAt DateTime? // When admin replied
  userId    String?  // Optional link to user account

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("contact_messages")
}

// Prop firms data
model PropFirm {
  id              String   @id @default(cuid())
  name            String   @unique
  logo            String?
  country         String
  rating          Float
  reviews         Int      @default(0)
  years           Int
  assets          String // JSON string of supported assets
  platforms       String // JSON string of supported platforms
  maxAllocation   String
  promo           String?
  description     String?
  website         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  reviewsData     Review[]
  favorites       UserFavorite[]

  @@map("prop_firms")
}

// User reviews for prop firms
model Review {
  id        String   @id @default(cuid())
  userId    String
  firmId    String
  rating    Int
  title     String?
  text      String
  createdAt DateTime @default(now())
  isApproved Boolean @default(false)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  firm PropFirm @relation(fields: [firmId], references: [id], onDelete: Cascade)

  @@unique([userId, firmId]) // One review per user per firm
  @@map("reviews")
}

// User favorites for prop firms
model UserFavorite {
  id        String   @id @default(cuid())
  userId    String
  firmId    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  firm PropFirm @relation(fields: [firmId], references: [id], onDelete: Cascade)

  @@unique([userId, firmId]) // One favorite per user per firm
  @@map("user_favorites")
}

// Market data cache
model MarketData {
  id        String   @id @default(cuid())
  symbol    String
  price     Float?
  change    Float?
  percentChange Float?
  type      String   // forex, crypto, indices
  timestamp DateTime @default(now())

  @@unique([symbol, type])
  @@map("market_data")
}

// Email campaigns for tracking bulk emails
model EmailCampaign {
  id          String   @id @default(cuid())
  subject     String
  content     String
  type        String   // custom, promotional, newsletter
  sentTo      Int
  status      String   // sent, failed, pending, scheduled
  scheduledAt DateTime?
  sentAt      DateTime?
  openedCount Int      @default(0)
  clickedCount Int     @default(0)
  bounceCount Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  emailEvents EmailEvent[]

  @@map("email_campaigns")
}

// Email events for tracking opens, clicks, bounces
model EmailEvent {
  id          String   @id @default(cuid())
  campaignId  String
  subscriberEmail String
  eventType   String   // sent, opened, clicked, bounced, unsubscribed
  timestamp   DateTime @default(now())
  userAgent   String?
  ipAddress   String?

  // Relations
  campaign EmailCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("email_events")
}

// Email templates for reusable content
model EmailTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  subject     String
  content     String
  type        String   // welcome, newsletter, promotional, support
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("email_templates")
}

// Testimonials for user reviews and testimonials
model Testimonial {
  id          String   @id @default(cuid())
  name        String
  title       String
  review      String
  avatar      String?
  rating      Int      @default(5)
  isApproved  Boolean  @default(false)
  source      String   @default("user") // user, trustpilot, admin
  firmName    String?  // Associated prop firm if any
  email       String?  // User email for verification
  ipAddress   String?  // For spam prevention
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("testimonials")
}
